#include<stdio.h>
#include <locale.h>
#include<iostream>
#include <math.h>
#include <time.h>
#include <stdint.h>
#include <string.h>
#include "Header.h"

using namespace std;
#define size 20
int main()
{
	setlocale(LC_ALL, "Russian");
	int n;

	do
	{
		printf("Введите номер задания: ");
		scanf("%d", &n);
		cin.get();
		switch (n) {
			//1.	Функция strncpy(s1, s2,n) копирует ровно n символов из строки s2 в строку s1, усекая при необходимости строку
			//s2 или заполняя избыточные символы дополнительными нулевыми символами. Целевая строка может не с одержать завершающего
			//нулевого символа, если длина строки s2 равна или больше n. Функция возвращает строку s1. Напишите собственную версию этой функции. 
			//Протестируйте эту функцию в рамках завершенной программы, которая ис¬пользует цикл для передачи входных значений рассматриваемой функции.
		case 1: {
			int r;
			char s2[] = "Функция strncpy(s1, s2,n) копирует ровно n символов из строки s2 в строку s1.";
			cout << "Введите кол-во символов для копирования:";
			cin >> r;
			char *s1 = NULL;
			printf("%s\n", s2);

			if (!(r > strlen(s2)))
			{
				r = strlen(s2);
				s1 = (char*)calloc(r, sizeof(char));
			}
			CopyS(s2, s1, r);
			printf("%s\n", s1);
		} break;

			//2.	Напишите программу, которая читает входные данные до тех пор, пока не встретится символ EOF, и выводит эти данные на экран. 
			//Эта функция должна распознавать и реализовывать следующие аргументы командной строки:
		//	a. - р печатать входные данные такими, какими они есть.
			//	b. - u преобразовать входные данные к верхнему регистру.
				//c. - l преобразовать входные данные к нижнему регистру.
		case 2: {
			char str[50],com;
			printf("Введите строку: \n");
			fgets(str, 50, stdin);
			int k = strlen(str);

			printf("Введите команду:\n");
			scanf("%c", &com);
			Command(str, com, k);
			
		}break;

			//3.	Дан массив символов, содержащий текст. Написать программу, реализующую: 
		//	a.данный метод шифрации;
			//b.дешифрацию строки при заданной гамме.
		case 3: {
			int nn;
			char str[50], com;
			printf("Введите строку: \n");
			fgets(str, 50, stdin);
			int k = strlen(str);
			cout << "Введите пункт задания: ";
			cin >> nn;
			switch (nn) {

			case 1: {	code(str, k);}break;
			case 2: {
				reverse_words(str, k);
			}break;
			}
		}break;

			//4.	Дан массив символов, содержащий текст. Отредактировать заданный текст, удаляя из него те слова, которые встречаются в предложении заданное число раз.
		case 4: {
			char str[50], count;
			printf("Введите строку: \n");
			fgets(str, 50, stdin);
			int k = strlen(str);
			printf("введите кол-во раз:/n");
			scanf("%d\n", count);

			
		}break;

			//5.	Дан массив символов, содержащий текст. Расстояние между двумя словами равной длины – это количество символов, которыми они отличаются.
			//В заданном массиве найти пару слов заданной длины с максимальным расстоянием.
		case 5: {

		}break;

			//6.	В символьном массиве хранятся фамилии и инициалы студентов группы требуется напечатать список группы с указанием для каждого студента количества его однофамильцев.
		case 6: {

		}break;

			//7.	Дан массив символов, состоящий из предложений, разделенных точками. Напишите программу, производящую следующее форматирование: 
		//	a.после каждой точки в конце предложения должен стоять хотя бы один пробел;
			//b.первое слово в предложении должно начинаться с прописной буквы.Замечание, текст может быть, как на русском, так и на английском языке
		case 7: {
			char m[] = "дан массив символов, состоящий из предложений, разделенных точками.напишите программу, производящую следующее форматирование.после каждой точки в конце предложения должен стоять пробел.";
			int k = strlen(m);
			seven(m, k);
			printf("%s\n", m);
		}break;

			//8.	Массив не более чем из 100 символов, содержащий произвольный русский текст. Написать, какие буквы и сколько раз встречаются в этом тексте. 
			//Ответ должен приводиться в грамматически правильной форме, например, а – 5 раз, к – 7 раз и т.д.
		case 8: {
			char str[] = "массив не более чем из 100 символов, содержащий произвольный русский текст";
			int k = strlen(str);
			eight(str, k);
		}break;

			//9.	Дан массив символов, содержащий текст. Слова зашифрованы – каждое из них записано наоборот. Расшифровать сообщение.
		case 9: {
			char str[50], com;
			printf("Введите слова наоборот: \n");
			fgets(str, 50, stdin);
			int k = strlen(str);
			reverse_words(str, k);

		}break;

			//10.	Дан массив символов, содержащий слова, разделенные точкой с запятой (;). Набор заканчивается двоеточием (:). Определить, сколько в нем слов, заканчивающихся буквой, а
		case 10: {
			char m[] = "да; масса; символ; состоящие; из; предложений; разделенна; точка;напишите; программа:";
			int k = strlen(m);
			ten(m, k);
		}break;
		}
	} while (n > 0);
}